input {
  # Process JSON files
  file {
    path => "/home/vboxuser/Desktop/projet ELK/data/steam.games.json"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
  }

  # Process the first CSV file (Country data)
  file {
    path => "/home/vboxuser/Desktop/Desktop/projet ELK/data/countries of the world.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "plain"
  }

  # Process the second CSV file (Financial data)
  file {
    path => "/home/vboxuser/Desktop/Desktop/projet ELK/data/Credit.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "plain"
  }
}

filter {
  # Filter for country CSV file
  if [path] =~ "countries of the world.csv" {
    csv {
      separator => ","  # Assuming comma-separated values in the CSV
      columns => [
        "Country", "Region", "Population", "Area (sq. mi.)", "Pop. Density (per sq. mi.)", 
        "Coastline (coast/area ratio)", "Net migration", "Infant mortality (per 1000 births)", 
        "GDP ($ per capita)", "Literacy (%)", "Phones (per 1000)", "Arable (%)", 
        "Crops (%)", "Other (%)", "Climate", "Birthrate", "Deathrate", 
        "Agriculture", "Industry", "Service"
      ]
    }

    # Convert fields to appropriate data types
    mutate {
      convert => {
        "Population" => "integer"
        "Area (sq. mi.)" => "float"
        "Pop. Density (per sq. mi.)" => "float"
        "Coastline (coast/area ratio)" => "float"
        "Net migration" => "float"
        "Infant mortality (per 1000 births)" => "float"
        "GDP ($ per capita)" => "float"
        "Literacy (%)" => "float"
        "Phones (per 1000)" => "float"
        "Arable (%)" => "float"
        "Crops (%)" => "float"
        "Other (%)" => "float"
        "Birthrate" => "float"
        "Deathrate" => "float"
        "Agriculture" => "float"
        "Industry" => "float"
        "Service" => "float"
      }
    }
  }

  # Filter for financial CSV file
  if [path] =~ "Credit.csv" {
    csv {
      separator => ","  # Assuming comma-separated values in the CSV
      columns => [
        "Income", "Limit", "Rating", "Cards", "Age", "Education", "Gender", 
        "Student", "Married", "Ethnicity", "Balance"
      ]
    }

    # Convert fields to appropriate data types
    mutate {
      convert => {
        "Income" => "float"
        "Limit" => "float"
        "Rating" => "integer"
        "Cards" => "integer"
        "Age" => "integer"
        "Education" => "integer"
        "Balance" => "float"
      }
    }

    # Optional: you can add more filters to process categorical fields like Gender, Student, etc.
  }

  # Filter for JSON files
  if [path] =~ "steam.games.json" {
    # Parse the JSON data
    json {
      source => "message"  # Assuming the raw JSON is in the "message" field
    }

    # Optional: Rename JSON fields or further process as needed
    mutate {
      rename => { "[response][game_count]" => "total_games" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "logs-%{+YYYY.MM.dd}"  # Date-based index names
    document_type => "_doc"          # Use default type for Elasticsearch 7+
  }

  # Optional: Output to stdout for debugging purposes
  stdout {
    codec => rubydebug
  }
}